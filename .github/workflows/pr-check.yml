on:
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
      - ready_for_review
  push:
    branches:
      - dev
  workflow_dispatch:

name: Check PR

concurrency:
  cancel-in-progress: true
  group: pr/${{ github.ref }}

jobs:
  tests:
    name: ${{ matrix.rust }} (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest ]
        rust: [ stable, nightly-2024-08-10 ]
        include:
          - os: ubuntu-latest
#          - os: macos-latest
    env:
      RUST_BACKTRACE: full
      RUSTV: ${{ matrix.rust }}
      SCCACHE_GHA_ENABLED: "true"
      RUSTC_WRAPPER: "sccache"
    steps:
      - name: Install dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update --yes
          sudo apt-get install --yes --no-install-recommends libasound2-dev libudev-dev libwayland-dev libxkbcommon-dev libvulkan-dev
      - uses: actions/checkout@v4
      - name: Run sccache-cache
        uses: mozilla-actions/sccache-action@v0.0.4
      - name: Install Rust ${{ matrix.rust }}
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.rust }}
          components: rustfmt, clippy
      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-r${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      - name: Start sccache server
        run: sccache --start-server

      - name: Run tests
        run: cargo "+${{ matrix.rust }}" test --workspace
      - name: Clippy
        run: cargo "+${{ matrix.rust }}" clippy --all-targets
      - name: Clippy - Server-only build
        run: cargo "+${{ matrix.rust }}" clippy -p gs_common
      - name: Check formatting
        if: startsWith(matrix.rust, 'nightly')
        run: cargo "+${{ matrix.rust }}" fmt --check --all

      - name: Print sccache stats
        run: ${SCCACHE_PATH} --show-stats
      - name: Stop sccache server
        run: ${SCCACHE_PATH} --stop-server || true

